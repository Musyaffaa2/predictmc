import React from 'react';
import CyberInput from './CyberInput';
import { isAutoGenerated, getPlaceholder } from '../utils/predictionLogic';

const RoundsTable = ({ 
  allRounds, 
  userName, 
  p8Name, 
  showAdvanced, 
  onRoundChange 
}) => {
  return (
    <div className="overflow-x-auto animate-fade-in-up" style={{ animationDelay: '0.9s' }}>
      <table className="w-full border-2 border-cyan-400 shadow-lg shadow-cyan-400/20 transform transition-all duration-500 hover:shadow-cyan-400/30">
        <thead>
          <tr className="bg-gradient-to-r from-cyan-400/30 to-purple-500/30">
            <th className="border-b-2 border-cyan-400 p-2 md:p-4 text-white font-mono font-bold text-center text-sm md:text-base transition-all duration-300 hover:bg-cyan-400/20">
              RONDE
            </th>
            <th className="border-b-2 border-cyan-400 p-2 md:p-4 text-white font-mono font-bold text-center text-sm md:text-base transition-all duration-300 hover:bg-cyan-400/20">
              <i className="fas fa-user mr-1 hidden md:inline"></i>
              {userName.trim() ? userName : 'User'} vs
            </th>
            <th className="border-b-2 border-cyan-400 p-2 md:p-4 text-white font-mono font-bold text-center text-sm md:text-base transition-all duration-300 hover:bg-cyan-400/20">
              <i className="fas fa-robot mr-1 hidden md:inline"></i>
              {p8Name.trim() ? p8Name : 'p8'} vs
            </th>
            {showAdvanced && (
              <th className="border-b-2 border-cyan-400 p-2 md:p-4 text-white font-mono font-bold text-center text-sm md:text-base transition-all duration-300 hover:bg-cyan-400/20">
                <i className="fas fa-cogs mr-1 hidden md:inline"></i>
                PATTERN
              </th>
            )}
          </tr>
        </thead>
        <tbody>
          {allRounds.map((round, index) => (
            <tr 
              key={`${round.round}-${round.isAdvanced || 'basic'}`}
              className={`hover:bg-cyan-400/5 transition-all duration-500 transform hover:scale-102 ${
                round.isAdvanced ? 'bg-purple-500/10 border-l-4 border-purple-500' : ''
              }`}
              style={{ 
                animation: `fadeInUp 0.6s ease-out ${0.05 * index + 1}s both`
              }}
            >
              <td className="border-b border-cyan-400/30 p-2 md:p-3 text-center bg-black/20">
                <div className={`w-6 h-6 md:w-8 md:h-8 ${
                  round.isAdvanced 
                    ? 'bg-gradient-to-br from-purple-500 to-pink-500' 
                    : 'bg-gradient-to-br from-cyan-500 to-blue-500'
                } text-white rounded-full flex items-center justify-center font-mono font-bold shadow-lg text-xs md:text-sm mx-auto transform transition-all duration-300 hover:scale-110`}>
                  {round.round}
                </div>
                {round.isAdvanced && (
                  <div className="text-xs text-purple-400 font-mono mt-1">ADV</div>
                )}
              </td>
              <td className="border-b border-cyan-400/30 p-1 md:p-3 bg-black/20">
                <CyberInput
                  value={round.userVs}
                  onChange={(e) => !round.isAdvanced && onRoundChange(index, 'userVs', e.target.value)}
                  placeholder={round.isAdvanced ? "AUTO-PREDICTED" : getPlaceholder(index, 'userVs', allRounds, userName, p8Name)}
                  isAuto={isAutoGenerated(round.round, 'userVs')}
                  className={`text-xs md:text-sm py-1 md:py-2 px-2 md:px-3 ${
                    round.isAdvanced ? 'border-purple-400 bg-purple-500/10' : ''
                  }`}
                />
              </td>
              <td className="border-b border-cyan-400/30 p-1 md:p-3 bg-black/20">
                <CyberInput
                  value={round.p8Vs}
                  onChange={(e) => !round.isAdvanced && onRoundChange(index, 'p8Vs', e.target.value)}
                  placeholder={round.isAdvanced ? "N/A" : getPlaceholder(index, 'p8Vs', allRounds, userName, p8Name)}
                  isAuto={round.isAdvanced ? true : isAutoGenerated(round.round, 'p8Vs')}
                  className={`text-xs md:text-sm py-1 md:py-2 px-2 md:px-3 ${
                    round.isAdvanced ? 'border-gray-600 bg-gray-800/50 opacity-50' : ''
                  }`}
                  disabled={round.isAdvanced}
                />
              </td>
              {showAdvanced && (
                <td className="border-b border-cyan-400/30 p-1 md:p-3 bg-black/20 text-center">
                  {round.pattern ? (
                    <span className="text-xs font-mono text-purple-300 bg-purple-500/20 px-2 py-1 rounded">
                      {round.pattern.toUpperCase()}
                    </span>
                  ) : round.isAdvanced ? (
                    <span className="text-xs font-mono text-red-300 bg-red-500/20 px-2 py-1 rounded">
                      UNKNOWN
                    </span>
                  ) : (
                    <span className="text-xs font-mono text-gray-500">-</span>
                  )}
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default RoundsTable;